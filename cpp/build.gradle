apply plugin: "base"

task generateHostJniHeaders(type: Copy) {
    dependsOn ":conclave-host:compileJava"
    def buildDir = project(":conclave-host").buildDir
    from ("$buildDir/generated/sources/headers/java/main") {
        include "com_r3_conclave_host_internal_Native.h"
        rename "com_r3_conclave_host_internal_Native.h","host_jni.h"
    }
    into ("$projectDir/jvm-host/include")
}

task generateHostSharedJniHeaders(type: Copy) {
    dependsOn ":conclave-host:compileJava"
    def buildDir = project(":conclave-host").buildDir
    from ("$buildDir/generated/sources/headers/java/main") {
        include "com_r3_conclave_host_internal_NativeSharedInternal.h"
        rename "com_r3_conclave_host_internal_NativeSharedInternal.h", "host_jni_shared.h"
    }
    into ("$projectDir/jvm-host-shared/include")
}

task generateEnclaveJniHeaders(type: Copy) {
    dependsOn ":conclave-enclave:compileJava"
    def buildDir = project(":conclave-enclave").buildDir
    from ("$buildDir/generated/sources/headers/java/main") {
        include "com_r3_conclave_enclave_internal_Native.h"
        rename "com_r3_conclave_enclave_internal_Native.h","enclave_jni.h"
    }
    into ("$projectDir/jvm-enclave-common/include")
}

// Native components can be built either in "Debug" or "Release" mode.
// These modes are not to be confused with the Debug/Simulation/Release modes of the enclave.
// The values correspond directly to the strings passed to -DCMAKE_BUILD_TYPE when building native components
// Release mode will enable optimisations, and Debug mode will ensure that compiled objects and libraries
// contain debugging symbols. Either mode will produce all the components required to build enclaves in any
// enclave mode. To build native components in debug mode, use -PnativeDebug when starting your build.

for (cmakeBuildType in ["Debug", "Release"]) {
    String cmakeBuildDir = "$buildDir/$cmakeBuildType"

    String createCmakeBuild = "createCmakeBuild$cmakeBuildType"
    String compileLinuxSgx = "compileLinuxSgx$cmakeBuildType"
    String compileHostShared = "compileHostShared$cmakeBuildType"
    String compileJvmEdl = "compileJvmEdl$cmakeBuildType"
    String compileHost = "compileHost$cmakeBuildType"
    String compileJvmEnclaveCommon = "compileJvmEnclaveCommon$cmakeBuildType"
    String compileSubstrateVMLib = "compileSubstrateVMLib$cmakeBuildType"
    String compileFatFsHost = "compileFatFsHost$cmakeBuildType"
    String compileFatFsEnclave = "compileFatFsEnclave$cmakeBuildType"
    String runCppUnitTests = "runCppUnitTests$cmakeBuildType"

    tasks.create(createCmakeBuild, Exec) {
        workingDir(cmakeBuildDir)

        commandLine("/usr/bin/env", "cmake", "-DCMAKE_BUILD_TYPE=$cmakeBuildType", projectDir)

        inputs.files(
                "$projectDir/CMakeLists.txt",
                "$projectDir/*/CMakeLists.txt"
        )

        outputs.files(
                "$cmakeBuildDir/Makefile"
        )
    }

    tasks.create(compileLinuxSgx, Exec) {
        dependsOn(createCmakeBuild)

        workingDir(cmakeBuildDir)

        commandLine("/usr/bin/env", "cmake",
                "--build", cmakeBuildDir,
                "--target", "linux-sgx-ext"
        )
    }

    tasks.create(compileJvmEdl, Exec) {
        dependsOn(createCmakeBuild, compileLinuxSgx)

        workingDir(cmakeBuildDir)

        commandLine("/usr/bin/env", "cmake",
                "--build", cmakeBuildDir,
                "--target", "jvm_host_edl", "jvm_enclave_edl"
        )
    }

    tasks.create(compileHostShared, Exec) {
        dependsOn(createCmakeBuild, generateHostSharedJniHeaders, compileLinuxSgx)

        workingDir(cmakeBuildDir)

        commandLine("/usr/bin/env", "cmake",
                "--build", cmakeBuildDir,
                "--target", "jvm_host_shared"
        )
    }

    tasks.create(compileHost, Exec) {
        dependsOn(createCmakeBuild, generateHostJniHeaders, compileLinuxSgx, compileHostShared)

        workingDir(cmakeBuildDir)

        commandLine("/usr/bin/env", "cmake",
                "--build", cmakeBuildDir,
                "--target", "jvm_host", "jvm_host_sim"
        )
    }

    tasks.create(compileJvmEnclaveCommon, Exec) {
        dependsOn(createCmakeBuild, compileJvmEdl)

        workingDir(cmakeBuildDir)

        commandLine("/usr/bin/env", "cmake",
                "--build", cmakeBuildDir,
                "--target", "jvm_enclave_common_simulation", "jvm_enclave_common_debug", "jvm_enclave_common_release"
        )
    }

    tasks.create(compileSubstrateVMLib, Exec) {
        dependsOn(createCmakeBuild, generateEnclaveJniHeaders)

        workingDir(cmakeBuildDir)

        commandLine("/usr/bin/env", "cmake",
                "--build", cmakeBuildDir,
                "--target", "substratevm"
        )
    }

    tasks.create(compileFatFsHost, Exec) {
        dependsOn(createCmakeBuild, generateHostJniHeaders, compileLinuxSgx, compileHostShared)

        workingDir(cmakeBuildDir)

        commandLine("/usr/bin/env", "cmake",
                "--build", cmakeBuildDir,
                "--target", "fatfs_host"
        )
    }

    tasks.create(compileFatFsEnclave, Exec) {
        dependsOn(createCmakeBuild, generateEnclaveJniHeaders)

        workingDir(cmakeBuildDir)

        commandLine("/usr/bin/env", "cmake",
                "--build", cmakeBuildDir,
                "--target", "fatfs_enclave"
        )
    }

    tasks.create(runCppUnitTests, Exec) {
        dependsOn(createCmakeBuild)

        workingDir(cmakeBuildDir)

        commandLine("/usr/bin/env", "cmake",
                "--build", cmakeBuildDir,
                "--target", "build_tests_and_run"
        )
    }
}
