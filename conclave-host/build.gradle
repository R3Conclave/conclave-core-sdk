plugins {
    id 'java-library'
    id 'org.jetbrains.kotlin.jvm'
}

dependencies {
    api project(":conclave-common")

    compileOnly "org.jetbrains.kotlin:kotlin-stdlib-jdk8"
    // Needed to parse the JSON response from the IAS
    compileOnly "com.fasterxml.jackson.core:jackson-databind:$jackson_version"

    implementation "io.github.classgraph:classgraph:$classgraph_version"
    // Logging using the SLF4J API
    implementation "org.slf4j:slf4j-api:$slf4j_version"

    testImplementation project(":internal-testing")
    testImplementation "org.junit.jupiter:junit-jupiter:$junit_jupiter_version"
    testImplementation "org.junit-pioneer:junit-pioneer:$junit_pioneer_version"
    testImplementation "org.assertj:assertj-core:$assertj_version"
    testImplementation "com.google.guava:guava:$guava_version"
}

// Copy required native libraries into resources
processResources {
    String cmakeBuildType = project.hasProperty("nativeDebug") ? "Debug" : "Release"

    dependsOn(":cpp:compileLinuxSgx$cmakeBuildType")
    dependsOn(":cpp:compileHost$cmakeBuildType")
    dependsOn(":cpp:compileHostShared$cmakeBuildType")

    String cppBuildDir = "${project(":cpp").buildDir}/$cmakeBuildType"
    String linuxSgxBuildDir = "$cppBuildDir/linux-sgx/src/linux-sgx"

    into("com/r3/conclave/host-libraries/shared") {
        from("$linuxSgxBuildDir/build/linux") {
            include "libsgx_capable.so"
        }
        from("$cppBuildDir/jvm-host-shared") {
            include "libjvm_host_shared.so"
        }
    }

    for (enclaveMode in ["Simulation", "Debug", "Release"]) {
        String simSuffix = enclaveMode == "Simulation" ? "_sim" : ""

        into("com/r3/conclave/host-libraries/$enclaveMode") {
            from("$linuxSgxBuildDir/build/linux") {
                include "libsgx_enclave_common.so"
                rename "libsgx_enclave_common.so", "libsgx_enclave_common.so.1"
                include "libsgx_epid${simSuffix}.so"
                rename "libsgx_epid${simSuffix}.so", "libsgx_epid${simSuffix}.so.1"
                include "libsgx_launch${simSuffix}.so"
                rename "libsgx_launch${simSuffix}.so", "libsgx_launch${simSuffix}.so.1"
                include "libsgx_urts${simSuffix}.so"
                rename "libsgx_urts.so", "libsgx_urts.so.2"
                include "libsgx_uae_service${simSuffix}.so"
                include "libsgx_qe3.signed.so"
                include "libsgx_id_enclave.signed.so"
                include "libsgx_pce.signed.so"
            }
            from("$cppBuildDir/jvm-host") {
                include "libjvm_host${simSuffix}.so"
                rename "libjvm_host${simSuffix}.so", "libjvm_host.so"
            }
            from("/usr/lib/x86_64-linux-gnu") {
                include "libcrypto.so"
                if (enclaveMode != "Simulation") {
                    include "libprotobuf.so"
                }
            }
            from("$linuxSgxBuildDir/external/dcap_source/QuoteGeneration/build/linux") {
                include "libsgx_qe3_logic.so"
                include "libsgx_id_enclave.signed.so"
                include "libsgx_pce_logic.so"
                include "libsgx_dcap_ql.so"
                rename "libsgx_dcap_ql.so", "libsgx_dcap_ql.so.1"
            }
            from("${rootProject.projectDir}/azure-plugin") {
                include "libdcap_quoteprov.so"
                rename "libdcap_quoteprov.so", "libdcap_quoteprov.so.1"
            }
        }
    }

    from("${rootProject.projectDir}/scripts/gramine-seccomp.json")
}
