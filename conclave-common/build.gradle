plugins {
    id 'java-library'
    id 'org.jetbrains.kotlin.jvm'
}

dependencies {
    api project(":conclave-mail")

    compileOnly "org.jetbrains.kotlin:kotlin-stdlib-jdk8"
    // Needed to parse the JSON response from the IAS
    compileOnly "com.fasterxml.jackson.core:jackson-databind:$jackson_version"
    compileOnly "com.fasterxml.jackson.datatype:jackson-datatype-jsr310:$jackson_version"

    // Java ed25519 implementation. See https://github.com/str4d/ed25519-java/
    implementation "net.i2p.crypto:eddsa:$i2pcrypto_eddsa_version"

    testImplementation project(":internal-testing")
    testImplementation "org.assertj:assertj-core:$assertj_version"
    testImplementation "org.junit.jupiter:junit-jupiter:$junit_jupiter_version"
}

jar {
    manifest {
        attributes(
                //  Conclave-GraalVM-Version is actually only needed by the GradleEnclavePlugin
                //  TODO: Separate the attributes of this manifest correctly
                "Conclave-GraalVM-Version": conclave_graal_version.toString(),
                "Jep-Version": jep_version.toString(),
                "Gramine-Version": gramine_version.toString(),
                "Docker-Conclave-Build-Tag": genDockerContainerTag())
    }
}

def genDockerContainerTag() {
    new ByteArrayOutputStream().withStream { os ->
        exec {
            executable = 'bash'
            args "-c", "${rootProject.projectDir}/scripts/genDockerImageTag.sh" // N.B.: The script must only print to the standard output
            // the docker image tag. Printing other information will cause issues
            standardOutput = os
        }
        return os.toString().trim()
    }
}
